{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { cloneDeep, filter } from \"lodash\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport PhraseBackup from \"../parts/PhraseBackup\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar PhraseBackUp = function PhraseBackUp(_ref) {\n  var navigation = _ref.navigation;\n  var data = [\"Mouse\", \"Believe\", \"Walnut\", \"Slave\", \"Sporadically\", \"Family\", \"Skin\", \"Lobster\", \"Friend\", \"Intact\", \"Twenty\", \"Camera\"];\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      selected = _useState2[0],\n      setSelected = _useState2[1];\n\n  var displayArr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n\n  var onSelect = function onSelect(index) {\n    var word = data[index];\n\n    if (!selected.includes(word)) {\n      var cloned = cloneDeep(selected);\n      cloned.push(word);\n      setSelected(cloned);\n    } else {\n      setSelected(function (prevState) {\n        return filter(prevState, function (x) {\n          return x !== selected[index];\n        });\n      });\n    }\n  };\n\n  var result = function result() {\n    Alert.alert(\"Complete Phrase Backup\", displayArr.toString().replace(\",\", \", \"), [{\n      text: \"Done\"\n    }]);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: [styles.description, {\n        fontSize: 20\n      }],\n      children: \"React Native Metamask Phrase Word Example\"\n    }), _jsx(Text, {\n      style: styles.description,\n      children: \"Select each word in the order it was presented to you.\"\n    }), _jsx(View, {\n      style: {\n        flexDirection: \"row\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexWrap: \"wrap\",\n        marginBottom: 30\n      },\n      children: displayArr.map(function (index) {\n        return _jsxs(View, {\n          style: [styles.displayItemContainer],\n          children: [_jsxs(Text, {\n            style: {\n              marginRight: 3\n            },\n            children: [index + 1, \".\"]\n          }), _jsx(TouchableOpacity, {\n            style: index < selected.length && selected[index] ? styles.displaySelectedButton : styles.displayButton,\n            onPress: function onPress() {\n              if (index < selected.length && selected[index]) {\n                setSelected(function (prevState) {\n                  return filter(prevState, function (x) {\n                    return x !== selected[index];\n                  });\n                });\n              }\n            },\n            children: _jsx(Text, {\n              style: styles.buttonText,\n              children: index < selected.length && selected[index]\n            })\n          })]\n        }, index);\n      })\n    }), _jsx(PhraseBackup, {\n      selected: selected,\n      data: data,\n      onChange: onSelect\n    }), _jsx(TouchableOpacity, {\n      style: {\n        width: 320,\n        height: 40,\n        borderWidth: 1,\n        borderColor: \"#000\",\n        borderRadius: 18,\n        marginTop: 20,\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      onPress: result,\n      children: _jsx(Text, {\n        style: {\n          fontWeight: \"500\"\n        },\n        children: \"Complete Backup\"\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  buttonText: {\n    justifyContent: \"center\"\n  },\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  description: {\n    width: 300,\n    textAlign: \"center\",\n    fontWeight: \"500\",\n    marginBottom: 10,\n    fontSize: 15\n  },\n  value: {\n    marginBottom: 10,\n    color: \"#FF4A8D\",\n    fontWeight: \"500\"\n  },\n  displayItemContainer: {\n    margin: 7,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\"\n  },\n  displayButton: {\n    flexDirection: \"column\",\n    width: 100,\n    height: 30,\n    borderWidth: 1,\n    borderColor: \"#000\",\n    borderRadius: 13,\n    marginRight: 6,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderStyle: \"dashed\"\n  },\n  displaySelectedButton: {\n    flexDirection: \"column\",\n    width: 100,\n    height: 30,\n    borderWidth: 1,\n    borderColor: \"#7057FF\",\n    borderRadius: 13,\n    marginRight: 6,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderStyle: \"solid\"\n  }\n});\nexport default PhraseBackUp;","map":{"version":3,"names":["cloneDeep","filter","React","useState","PhraseBackup","PhraseBackUp","navigation","data","selected","setSelected","displayArr","onSelect","index","word","includes","cloned","push","prevState","x","result","Alert","alert","toString","replace","text","styles","container","description","fontSize","flexDirection","justifyContent","alignItems","flexWrap","marginBottom","map","displayItemContainer","marginRight","length","displaySelectedButton","displayButton","buttonText","width","height","borderWidth","borderColor","borderRadius","marginTop","fontWeight","StyleSheet","create","flex","textAlign","value","color","margin","borderStyle"],"sources":["/Users/hal/WebstormProjects/AwesomeWallet/screens/PhraseBackUp.tsx"],"sourcesContent":["import { cloneDeep, filter } from \"lodash\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport {\n  View,\n  Button,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  Alert,\n} from \"react-native\";\nimport PhraseBackup from \"../parts/PhraseBackup\";\n\nconst PhraseBackUp = ({ navigation }: any) => {\n  const data = [\n    \"Mouse\",\n    \"Believe\",\n    \"Walnut\",\n    \"Slave\",\n    \"Sporadically\",\n    \"Family\",\n    \"Skin\",\n    \"Lobster\",\n    \"Friend\",\n    \"Intact\",\n    \"Twenty\",\n    \"Camera\",\n  ];\n\n  const [selected, setSelected] = useState<string[]>([]);\n  const displayArr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n  const onSelect = (index: number) => {\n    const word: string = data[index];\n    if (!selected.includes(word)) {\n      const cloned = cloneDeep(selected);\n      cloned.push(word);\n      setSelected(cloned);\n    }\n    else{\n        setSelected((prevState) => {\n            return filter(prevState, (x) => x !== selected[index]);\n        });\n    }\n  };\n\n  const result = () => {\n    Alert.alert(\n      \"Complete Phrase Backup\",\n      displayArr.toString().replace(\",\", \", \"),\n      [{ text: \"Done\" }]\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={[styles.description, { fontSize: 20 }]}>\n        React Native Metamask Phrase Word Example\n      </Text>\n      <Text style={styles.description}>\n        Select each word in the order it was presented to you.\n      </Text>\n      <View\n        style={{\n          flexDirection: \"row\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          flexWrap: \"wrap\",\n          marginBottom: 30,\n        }}\n      >\n        {displayArr.map((index) => (\n          <View key={index} style={[styles.displayItemContainer]}>\n            <Text style={{ marginRight: 3 }}>{index + 1}.</Text>\n            <TouchableOpacity\n              style={\n                index < selected.length && selected[index]\n                  ? styles.displaySelectedButton\n                  : styles.displayButton\n              }\n              onPress={() => {\n                if (index < selected.length && selected[index]) {\n                  setSelected((prevState) => {\n                    return filter(prevState, (x) => x !== selected[index]);\n                  });\n                }\n              }}\n            >\n              <Text style={styles.buttonText}>\n                {index < selected.length && selected[index]}\n              </Text>\n            </TouchableOpacity>\n          </View>\n        ))}\n      </View>\n      <PhraseBackup selected={selected} data={data} onChange={onSelect} />\n      <TouchableOpacity\n        style={{\n          width: 320,\n          height: 40,\n          borderWidth: 1,\n          borderColor: \"#000\",\n          borderRadius: 18,\n          marginTop: 20,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n        onPress={result}\n      >\n        <Text style={{ fontWeight: \"500\" }}>Complete Backup</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  buttonText: {\n    justifyContent: \"center\",\n  },\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  description: {\n    width: 300,\n    textAlign: \"center\",\n    fontWeight: \"500\",\n    marginBottom: 10,\n    fontSize: 15,\n  },\n  value: {\n    marginBottom: 10,\n    color: \"#FF4A8D\",\n    fontWeight: \"500\",\n  },\n  displayItemContainer: {\n    margin: 7,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  displayButton: {\n    flexDirection: \"column\",\n    width: 100,\n    height: 30,\n    borderWidth: 1,\n    borderColor: \"#000\",\n    borderRadius: 13,\n    marginRight: 6,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderStyle: \"dashed\",\n  },\n  displaySelectedButton: {\n    flexDirection: \"column\",\n    width: 100,\n    height: 30,\n    borderWidth: 1,\n    borderColor: \"#7057FF\",\n    borderRadius: 13,\n    marginRight: 6,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderStyle: \"solid\",\n  },\n});\n\nexport default PhraseBackUp;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}