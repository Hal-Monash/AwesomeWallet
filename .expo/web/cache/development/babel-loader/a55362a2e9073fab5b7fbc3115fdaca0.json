{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction isBase64(str) {\n  var regex = /^data:image\\/(?:gif|png|jpeg|bmp|webp)(?:;charset=utf-8)?;base64,(?:[A-Za-z0-9]|[+/])+={0,2}/;\n  return str && regex.test(str);\n}\n\nexport var SegmentedControlTab = function SegmentedControlTab(_ref) {\n  var onSelect = _ref.onSelect,\n      value = _ref.value,\n      enabled = _ref.enabled,\n      selected = _ref.selected,\n      tintColor = _ref.tintColor,\n      _ref$fontStyle = _ref.fontStyle,\n      fontStyle = _ref$fontStyle === void 0 ? {} : _ref$fontStyle,\n      _ref$activeFontStyle = _ref.activeFontStyle,\n      activeFontStyle = _ref$activeFontStyle === void 0 ? {} : _ref$activeFontStyle,\n      appearance = _ref.appearance;\n  var colorSchemeHook = useColorScheme();\n  var colorScheme = appearance || colorSchemeHook;\n  var textColor = fontStyle.color,\n      fontSize = fontStyle.fontSize,\n      fontFamily = fontStyle.fontFamily,\n      fontWeight = fontStyle.fontWeight;\n  var activeColor = activeFontStyle.color,\n      activeFontSize = activeFontStyle.fontSize,\n      activeFontFamily = activeFontStyle.fontFamily,\n      activeFontWeight = activeFontStyle.fontWeight;\n\n  var getColor = function getColor() {\n    if (textColor) {\n      return textColor;\n    }\n\n    if (tintColor) {\n      return 'white';\n    }\n\n    return colorScheme === 'dark' ? '#FFF' : '#000';\n  };\n\n  var color = getColor();\n\n  var activeStyle = _objectSpread(_objectSpread({}, styles.activeText), {}, {\n    fontFamily: activeFontFamily || fontFamily,\n    fontSize: activeFontSize || fontSize,\n    color: activeColor || color,\n    fontWeight: activeFontWeight || fontWeight || styles.activeText.fontWeight\n  });\n\n  var idleStyle = {\n    color: color,\n    fontSize: fontSize,\n    fontFamily: fontFamily,\n    fontWeight: fontWeight\n  };\n  return _jsx(TouchableOpacity, {\n    style: styles.container,\n    disabled: !enabled,\n    onPress: onSelect,\n    children: _jsx(View, {\n      style: [styles.default],\n      children: typeof value === 'number' || typeof value === 'object' ? _jsx(Image, {\n        source: value,\n        style: styles.segmentImage\n      }) : isBase64(value) ? _jsx(Image, {\n        source: {\n          uri: value\n        },\n        style: styles.segmentImage\n      }) : _jsx(Text, {\n        style: [idleStyle, selected && activeStyle],\n        children: value\n      })\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    borderRadius: 5\n  },\n  default: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 2,\n    borderRadius: 5\n  },\n  activeText: {\n    fontWeight: '700'\n  },\n  segmentImage: {\n    width: 17,\n    height: 17,\n    resizeMode: 'contain'\n  }\n});","map":{"version":3,"names":["React","isBase64","str","regex","test","SegmentedControlTab","onSelect","value","enabled","selected","tintColor","fontStyle","activeFontStyle","appearance","colorSchemeHook","useColorScheme","colorScheme","textColor","color","fontSize","fontFamily","fontWeight","activeColor","activeFontSize","activeFontFamily","activeFontWeight","getColor","activeStyle","styles","activeText","idleStyle","container","default","segmentImage","uri","StyleSheet","create","flex","borderRadius","justifyContent","alignItems","margin","width","height","resizeMode"],"sources":["/Users/hal/WebstormProjects/AwesomeWallet/node_modules/@react-native-community/segmented-control/js/SegmentedControlTab.js"],"sourcesContent":["/**\n * @flow\n */\n\n'use strict';\n\nimport * as React from 'react';\n\nimport {\n  Image,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n  useColorScheme,\n} from 'react-native';\n\nimport type {FontStyle} from './types';\n\ntype Props = $ReadOnly<{|\n  value: string | number | Object,\n  tintColor?: ?string,\n  onSelect: () => void,\n  selected: boolean,\n  enabled: boolean,\n  fontStyle?: FontStyle,\n  activeFontStyle?: FontStyle,\n  appearance?: 'dark' | 'light' | null,\n|}>;\n\nfunction isBase64(str) {\n  const regex = /^data:image\\/(?:gif|png|jpeg|bmp|webp)(?:;charset=utf-8)?;base64,(?:[A-Za-z0-9]|[+/])+={0,2}/;\n  return str && regex.test(str);\n}\n\nexport const SegmentedControlTab = ({\n  onSelect,\n  value,\n  enabled,\n  selected,\n  tintColor,\n  fontStyle = {},\n  activeFontStyle = {},\n  appearance,\n}: Props): React.Node => {\n  const colorSchemeHook = useColorScheme();\n  const colorScheme = appearance || colorSchemeHook;\n  const {color: textColor, fontSize, fontFamily, fontWeight} = fontStyle;\n\n  const {\n    color: activeColor,\n    fontSize: activeFontSize,\n    fontFamily: activeFontFamily,\n    fontWeight: activeFontWeight,\n  } = activeFontStyle;\n\n  const getColor = () => {\n    if (textColor) {\n      return textColor;\n    }\n    if (tintColor) {\n      return 'white';\n    }\n    return colorScheme === 'dark' ? '#FFF' : '#000';\n  };\n  const color = getColor();\n\n  const activeStyle = {\n    ...styles.activeText,\n    fontFamily: activeFontFamily || fontFamily,\n    fontSize: activeFontSize || fontSize,\n    color: activeColor || color,\n    fontWeight: activeFontWeight || fontWeight || styles.activeText.fontWeight,\n  };\n\n  const idleStyle = {\n    color,\n    fontSize: fontSize,\n    fontFamily: fontFamily,\n    fontWeight: fontWeight,\n  };\n\n  return (\n    <TouchableOpacity\n      style={styles.container}\n      disabled={!enabled}\n      onPress={onSelect}>\n      <View style={[styles.default]}>\n        {typeof value === 'number' || typeof value === 'object' ? (\n          <Image source={value} style={styles.segmentImage} />\n        ) : isBase64(value) ? (\n          <Image source={{uri: value}} style={styles.segmentImage} />\n        ) : (\n          <Text style={[idleStyle, selected && activeStyle]}>{value}</Text>\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {flex: 1, borderRadius: 5},\n  default: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 2,\n    borderRadius: 5,\n  },\n  activeText: {\n    fontWeight: '700',\n  },\n  segmentImage: {\n    width: 17,\n    height: 17,\n    resizeMode: 'contain',\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}