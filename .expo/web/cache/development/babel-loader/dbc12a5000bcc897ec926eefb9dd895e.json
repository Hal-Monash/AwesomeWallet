{"ast":null,"code":"'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { SegmentedControlTab } from \"./SegmentedControlTab\";\nimport { SegmentsSeparators } from \"./SegmentsSeparators\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SegmentedControl = function SegmentedControl(_ref) {\n  var style = _ref.style,\n      onChange = _ref.onChange,\n      onValueChange = _ref.onValueChange,\n      _ref$enabled = _ref.enabled,\n      enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n      selectedIndex = _ref.selectedIndex,\n      values = _ref.values,\n      tintColor = _ref.tintColor,\n      backgroundColor = _ref.backgroundColor,\n      fontStyle = _ref.fontStyle,\n      activeFontStyle = _ref.activeFontStyle,\n      appearance = _ref.appearance;\n  var colorSchemeHook = useColorScheme();\n  var colorScheme = appearance || colorSchemeHook;\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      segmentWidth = _React$useState2[0],\n      setSegmentWidth = _React$useState2[1];\n\n  var animation = React.useRef(new Animated.Value(0)).current;\n\n  var handleChange = function handleChange(index) {\n    var event = {\n      nativeEvent: {\n        value: values[index],\n        selectedSegmentIndex: index\n      }\n    };\n    onChange && onChange(event);\n    onValueChange && onValueChange(values[index]);\n  };\n\n  React.useEffect(function () {\n    if (animation && segmentWidth) {\n      var isRTL = I18nManager.isRTL ? -segmentWidth : segmentWidth;\n      Animated.timing(animation, {\n        toValue: isRTL * (selectedIndex || 0),\n        duration: 300,\n        easing: Easing.out(Easing.quad),\n        useNativeDriver: true\n      }).start();\n    }\n  }, [animation, segmentWidth, selectedIndex]);\n  return _jsxs(View, {\n    style: [styles.default, style, colorScheme === 'dark' && styles.darkControl, backgroundColor && {\n      backgroundColor: backgroundColor\n    }, !enabled && styles.disabled],\n    onLayout: function onLayout(_ref2) {\n      var width = _ref2.nativeEvent.layout.width;\n      var newSegmentWidth = values.length ? width / values.length : 0;\n\n      if (newSegmentWidth !== segmentWidth) {\n        animation.setValue(newSegmentWidth * (selectedIndex || 0));\n        setSegmentWidth(newSegmentWidth);\n      }\n    },\n    children: [!backgroundColor && !tintColor && _jsx(SegmentsSeparators, {\n      values: values.length,\n      selectedIndex: selectedIndex\n    }), _jsx(View, {\n      style: styles.segmentsContainer,\n      children: values && values.map(function (value, index) {\n        return _jsx(SegmentedControlTab, {\n          enabled: enabled,\n          selected: selectedIndex === index,\n          value: value,\n          tintColor: tintColor,\n          fontStyle: fontStyle,\n          activeFontStyle: activeFontStyle,\n          appearance: colorScheme,\n          onSelect: function onSelect() {\n            handleChange(index);\n          }\n        }, index);\n      })\n    }), selectedIndex != null && segmentWidth ? _jsx(Animated.View, {\n      style: [styles.slider, {\n        transform: [{\n          translateX: animation\n        }],\n        width: segmentWidth - 4,\n        backgroundColor: tintColor || (colorScheme === 'dark' ? '#636366' : 'white')\n      }]\n    }) : null]\n  });\n};\n\nvar styles = StyleSheet.create({\n  default: {\n    overflow: 'hidden',\n    position: 'relative',\n    height: 32,\n    backgroundColor: '#EEEEF0',\n    borderRadius: 9\n  },\n  darkControl: {\n    backgroundColor: '#1C1C1F'\n  },\n  disabled: {\n    opacity: 0.4\n  },\n  slider: {\n    position: 'absolute',\n    borderRadius: 7,\n    top: 2,\n    bottom: 2,\n    right: 2,\n    left: 2,\n    borderWidth: 0.5,\n    borderColor: 'rgba(0,0,0,0.04)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n    elevation: 3\n  },\n  segmentsContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n    elevation: 5,\n    backgroundColor: 'transparent',\n    zIndex: 99\n  }\n});\nexport default SegmentedControl;","map":{"version":3,"names":["React","SegmentedControlTab","SegmentsSeparators","SegmentedControl","style","onChange","onValueChange","enabled","selectedIndex","values","tintColor","backgroundColor","fontStyle","activeFontStyle","appearance","colorSchemeHook","useColorScheme","colorScheme","useState","segmentWidth","setSegmentWidth","animation","useRef","Animated","Value","current","handleChange","index","event","nativeEvent","value","selectedSegmentIndex","useEffect","isRTL","I18nManager","timing","toValue","duration","easing","Easing","out","quad","useNativeDriver","start","styles","default","darkControl","disabled","width","layout","newSegmentWidth","length","setValue","segmentsContainer","map","slider","transform","translateX","StyleSheet","create","overflow","position","height","borderRadius","opacity","top","bottom","right","left","borderWidth","borderColor","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","flex","flexDirection","justifyContent","alignItems","zIndex"],"sources":["/Users/hal/WebstormProjects/AwesomeWallet/node_modules/@react-native-community/segmented-control/js/SegmentedControl.js"],"sourcesContent":["/**\n * @flow\n */\n\n'use strict';\n\nimport * as React from 'react';\n\nimport {\n  Animated,\n  Easing,\n  I18nManager,\n  StyleSheet,\n  View,\n  useColorScheme,\n} from 'react-native';\n\nimport type {SegmentedControlProps} from './types';\nimport {SegmentedControlTab} from './SegmentedControlTab';\nimport {SegmentsSeparators} from './SegmentsSeparators';\n\n/**\n * SegmentedControl\n * iOS 13 Style UISegmentedControl Component for Android and Web\n */\nconst SegmentedControl = ({\n  style,\n  onChange,\n  onValueChange,\n  enabled = true,\n  selectedIndex,\n  values,\n  tintColor,\n  backgroundColor,\n  fontStyle,\n  activeFontStyle,\n  appearance,\n}: SegmentedControlProps): React.Node => {\n  const colorSchemeHook = useColorScheme();\n  const colorScheme = appearance || colorSchemeHook;\n  const [segmentWidth, setSegmentWidth] = React.useState(0);\n  const animation = React.useRef(new Animated.Value(0)).current;\n\n  const handleChange = (index: number) => {\n    // mocks iOS's nativeEvent\n    const event: any = {\n      nativeEvent: {\n        value: values[index],\n        selectedSegmentIndex: index,\n      },\n    };\n    onChange && onChange(event);\n    onValueChange && onValueChange(values[index]);\n  };\n\n  React.useEffect(() => {\n    if (animation && segmentWidth) {\n      let isRTL = I18nManager.isRTL ? -segmentWidth : segmentWidth;\n      Animated.timing(animation, {\n        toValue: isRTL * (selectedIndex || 0),\n        duration: 300,\n        easing: Easing.out(Easing.quad),\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [animation, segmentWidth, selectedIndex]);\n\n  return (\n    <View\n      style={[\n        styles.default,\n        style,\n        colorScheme === 'dark' && styles.darkControl,\n        backgroundColor && {backgroundColor},\n        !enabled && styles.disabled,\n      ]}\n      onLayout={({\n        nativeEvent: {\n          layout: {width},\n        },\n      }) => {\n        const newSegmentWidth = values.length ? width / values.length : 0;\n        if (newSegmentWidth !== segmentWidth) {\n          animation.setValue(newSegmentWidth * (selectedIndex || 0));\n          setSegmentWidth(newSegmentWidth);\n        }\n      }}>\n      {!backgroundColor && !tintColor && (\n        <SegmentsSeparators\n          values={values.length}\n          selectedIndex={selectedIndex}\n        />\n      )}\n      <View style={styles.segmentsContainer}>\n        {values &&\n          values.map((value, index) => {\n            return (\n              <SegmentedControlTab\n                enabled={enabled}\n                selected={selectedIndex === index}\n                key={index}\n                value={value}\n                tintColor={tintColor}\n                fontStyle={fontStyle}\n                activeFontStyle={activeFontStyle}\n                appearance={colorScheme}\n                onSelect={() => {\n                  handleChange(index);\n                }}\n              />\n            );\n          })}\n      </View>\n      {selectedIndex != null && segmentWidth ? (\n        <Animated.View\n          style={[\n            styles.slider,\n            {\n              transform: [{translateX: animation}],\n              width: segmentWidth - 4,\n              backgroundColor:\n                tintColor || (colorScheme === 'dark' ? '#636366' : 'white'),\n            },\n          ]}\n        />\n      ) : null}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  default: {\n    overflow: 'hidden',\n    position: 'relative',\n    height: 32,\n    backgroundColor: '#EEEEF0',\n    borderRadius: 9,\n  },\n  darkControl: {\n    backgroundColor: '#1C1C1F',\n  },\n  disabled: {\n    opacity: 0.4,\n  },\n  slider: {\n    position: 'absolute',\n    borderRadius: 7,\n    top: 2,\n    bottom: 2,\n    right: 2,\n    left: 2,\n    borderWidth: 0.5,\n    borderColor: 'rgba(0,0,0,0.04)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n    elevation: 3,\n  },\n  segmentsContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n    elevation: 5,\n    backgroundColor: 'transparent',\n    zIndex: 99,\n  },\n});\n\nexport default SegmentedControl;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}