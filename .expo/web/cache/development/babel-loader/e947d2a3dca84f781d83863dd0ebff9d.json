{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["/Users/hal/WebstormProjects/AwesomeWallet/screens/CryptoDetail.tsx"],"sourcesContent":["// import React from \"react\";\n// import {\n//   StyleSheet,\n//   SafeAreaView,\n//   View,\n//   Text,\n//   TouchableOpacity,\n//   Image,\n//   ScrollView,\n//   Animated,\n// } from \"react-native\";\n//\n// import {\n//   VictoryScatter,\n//   VictoryLine,\n//   VictoryChart,\n//   VictoryAxis,\n// } from \"victory-native\";\n//\n// import { VictoryCustomTheme } from \"../styles\";\n//\n// import HeaderBar from \"../parts/HeaderBar\";\n// import CurrencyLabel from \"../parts/CurrencyLabel\";\n// import TextButton from \"../parts/TextButton\";\n// import PriceAlert from \"../parts/PriceAlert\";\n//\n// import { dummyData, COLORS, SIZES, FONTS, icons, images } from \"../index\";\n//\n// const CryptoDetail = ({ route, navigation }) => {\n//   const scrollX = new Animated.Value(0);\n//   const numberOfCharts = [1, 2, 3];\n//\n//   const [selectedCurrency, setSelectedCurrency] = React.useState(null);\n//\n//   const [chartOptions, setChartOptions] = React.useState(\n//     dummyData.chartOptions\n//   );\n//   const [selectedOption, setSelectedOption] = React.useState(chartOptions[0]);\n//\n//   React.useEffect(() => {\n//     const { currency } = route.params;\n//     setSelectedCurrency(currency);\n//   }, []);\n//\n//   function optionOnClickHandler(option) {\n//     setSelectedOption(option);\n//   }\n//\n//   function renderDots() {\n//     const dotPosition = Animated.divide(scrollX, SIZES.width);\n//     return (\n//       <View style={{ height: 30, marginTop: 15 }}>\n//         <View\n//           style={{\n//             flexDirection: \"row\",\n//             alignItems: \"center\",\n//             justifyContent: \"center\",\n//           }}\n//         >\n//           {numberOfCharts.map((item, index) => {\n//             const opacity = dotPosition.interpolate({\n//               inputRange: [index - 1, index, index + 1],\n//               outputRange: [0.3, 1, 0.3],\n//               extrapolate: \"clamp\",\n//             });\n//\n//             const dotSize = dotPosition.interpolate({\n//               inputRange: [index - 1, index, index + 1],\n//               outputRange: [SIZES.base * 0.8, 10, SIZES.base * 0.8],\n//               extrapolate: \"clamp\",\n//             });\n//\n//             const dotColor = dotPosition.interpolate({\n//               inputRange: [index - 1, index, index + 1],\n//               outputRange: [COLORS.gray, COLORS.primary, COLORS.gray],\n//               extrapolate: \"clamp\",\n//             });\n//\n//             return (\n//               <Animated.View\n//                 key={`dot-${index}`}\n//                 style={[\n//                   {\n//                     opacity: opacity,\n//                     borderRadius: SIZES.radius,\n//                     marginHorizontal: 6,\n//                     width: dotSize,\n//                     height: dotSize,\n//                     backgroundColor: dotColor,\n//                   },\n//                 ]}\n//               />\n//             );\n//           })}\n//         </View>\n//       </View>\n//     );\n//   }\n//   function renderChart() {\n//     return (\n//       <View\n//         style={{\n//           marginTop: SIZES.padding,\n//           marginHorizontal: SIZES.radius,\n//           alignItems: \"center\",\n//           borderRadius: SIZES.radius,\n//           backgroundColor: COLORS.white,\n//           ...styles.shadow,\n//         }}\n//       >\n//         {/* Header */}\n//         <View\n//           style={{\n//             flexDirection: \"row\",\n//             marginTop: SIZES.padding,\n//             paddingHorizontal: SIZES.padding,\n//           }}\n//         >\n//           <View style={{ flex: 1 }}>\n//             <CurrencyLabel\n//               icon={selectedCurrency?.image}\n//               currency={selectedCurrency?.currency}\n//               code={selectedCurrency?.code}\n//             />\n//           </View>\n//\n//           <View>\n//             <Text style={{ ...FONTS.h3 }}>${selectedCurrency?.amount}</Text>\n//             <Text\n//               style={{\n//                 color:\n//                   selectedCurrency?.type == \"I\" ? COLORS.green : COLORS.red,\n//                 ...FONTS.body3,\n//               }}\n//             >\n//               {selectedCurrency?.changes}\n//             </Text>\n//           </View>\n//         </View>\n//         {/* Chart */}\n//         <Animated.ScrollView\n//           horizontal\n//           pagingEnabled\n//           scrollEventThrottle={16}\n//           snapToAlignment=\"center\"\n//           snapToInterval={SIZES.width - 40}\n//           showsHorizontalScrollIndicator={false}\n//           decelerationRate={0}\n//           onScroll={Animated.event(\n//             [{ nativeEvent: { contentOffset: { x: scrollX } } }],\n//             { useNativeDriver: false }\n//           )}\n//         >\n//           {numberOfCharts.map((item, index) => (\n//             <View\n//               key={`chart-${index}`}\n//               style={{\n//                 marginLeft: index == 0 ? SIZES.base : 0,\n//               }}\n//             >\n//               <View\n//                 style={{\n//                   marginTop: -25,\n//                 }}\n//               >\n//                 <VictoryChart\n//                   theme={VictoryCustomTheme}\n//                   height={220}\n//                   width={SIZES.width - 40}\n//                 >\n//                   <VictoryLine\n//                     style={{\n//                       data: {\n//                         stroke: COLORS.secondary,\n//                       },\n//                       parent: {\n//                         border: \"1px solid #ccc\",\n//                       },\n//                     }}\n//                     data={selectedCurrency?.chartData}\n//                     categories={{\n//                       x: [\"15min\", \"30min\", \"45min\", \"60min\"],\n//                       y: [\"15\", \"30\", \"45\"],\n//                     }}\n//                   />\n//                   <VictoryScatter\n//                     data={selectedCurrency?.chartData}\n//                     size={7}\n//                     style={{\n//                       data: {\n//                         fill: COLORS.secondary,\n//                       },\n//                     }}\n//                   />\n//                   <VictoryAxis\n//                     style={{\n//                       grid: {\n//                         stroke: \"transparent\",\n//                       },\n//                     }}\n//                   />\n//                   <VictoryAxis\n//                     dependentAxis\n//                     style={{\n//                       axis: {\n//                         stroke: \"transparent\",\n//                       },\n//                       grid: {\n//                         stroke: \"grey\",\n//                       },\n//                     }}\n//                   />\n//                 </VictoryChart>\n//               </View>\n//             </View>\n//           ))}\n//         </Animated.ScrollView>\n//         {/* Options */}\n//         <View\n//           style={{\n//             width: \"100%\",\n//             paddingHorizontal: SIZES.padding,\n//             flexDirection: \"row\",\n//             justifyContent: \"space-between\",\n//           }}\n//         >\n//           {chartOptions.map((option) => {\n//             return (\n//               <TextButton\n//                 key={`options-${option.id}`}\n//                 label={option.label}\n//                 customContainerStyle={{\n//                   height: 30,\n//                   width: 60,\n//                   borderRadius: 15,\n//                   backgroundColor:\n//                     selectedOption.id == option.id\n//                       ? COLORS.primary\n//                       : COLORS.lightGray,\n//                 }}\n//                 customLabelStyle={{\n//                   color:\n//                     selectedOption.id == option.id ? COLORS.white : COLORS.gray,\n//                   ...FONTS.body5,\n//                 }}\n//                 onPress={() => optionOnClickHandler(option)}\n//               />\n//             );\n//           })}\n//         </View>\n//\n//         {/* Dots */}\n//         {renderDots()}\n//       </View>\n//     );\n//   }\n//\n//   function renderBuy() {\n//     return (\n//       <View\n//         style={{\n//           marginTop: SIZES.padding,\n//           marginHorizontal: SIZES.radius,\n//           padding: SIZES.radius,\n//           borderRadius: SIZES.radius,\n//           backgroundColor: COLORS.white,\n//           ...styles.shadow,\n//         }}\n//       >\n//         <View\n//           style={{\n//             flexDirection: \"row\",\n//             alignItems: \"center\",\n//             marginBottom: SIZES.radius,\n//           }}\n//         >\n//           {/* Currency */}\n//           <View\n//             style={{\n//               flex: 1,\n//             }}\n//           >\n//             <CurrencyLabel\n//               icon={selectedCurrency?.image}\n//               currency={`${selectedCurrency?.currency} Wallet`}\n//               code={selectedCurrency?.code}\n//             />\n//           </View>\n//           {/* Amount */}\n//           <View\n//             style={{\n//               flexDirection: \"row\",\n//               alignItems: \"center\",\n//             }}\n//           >\n//             <View style={{ marginRight: SIZES.base }}>\n//               <Text style={{ ...FONTS.h3 }}>\n//                 ${selectedCurrency?.wallet.value}\n//               </Text>\n//               <Text\n//                 style={{\n//                   textAlign: \"right\",\n//                   color: COLORS.gray,\n//                   ...FONTS.body4,\n//                 }}\n//               >\n//                 {selectedCurrency?.wallet.crytpo} {selectedCurrency?.code}{\" \"}\n//               </Text>\n//             </View>\n//             <Image\n//               source={icons.right_arrow}\n//               resizeMode=\"cover\"\n//               style={{\n//                 width: 20,\n//                 height: 20,\n//                 tintColor: COLORS.gray,\n//               }}\n//             />\n//           </View>\n//         </View>\n//         <TextButton\n//           label=\"Buy\"\n//           onPress={() =>\n//             navigation.navigate(\"Transaction\", { currency: selectedCurrency })\n//           }\n//         />\n//       </View>\n//     );\n//   }\n//\n//   function renderAbout() {\n//     return (\n//       <View\n//         style={{\n//           marginTop: SIZES.padding,\n//           marginHorizontal: SIZES.radius,\n//           padding: SIZES.radius,\n//           borderRadius: SIZES.radius,\n//           backgroundColor: COLORS.white,\n//           ...styles.shadow,\n//         }}\n//       >\n//         <Text style={{ ...FONTS.h3 }}>About {selectedCurrency?.currency} </Text>\n//         <Text style={{ marginTop: SIZES.base, ...FONTS.body3 }}>\n//           {selectedCurrency?.description}{\" \"}\n//         </Text>\n//       </View>\n//     );\n//   }\n//   return (\n//     <SafeAreaView\n//       style={{\n//         flex: 1,\n//         backgroundColor: COLORS.lightGray1,\n//       }}\n//     >\n//       <HeaderBar right={true} />\n//       <ScrollView\n//         style={{\n//           flex: 1,\n//           paddingBottom: 130,\n//         }}\n//       >\n//         {renderChart()}\n//         {renderBuy()}\n//         {renderAbout()}\n//         <PriceAlert\n//           customContainerStyle={{\n//             marginTop: SIZES.padding,\n//             marginHorizontal: SIZES.radius,\n//           }}\n//         />\n//       </ScrollView>\n//     </SafeAreaView>\n//   );\n// };\n//\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     alignItems: \"center\",\n//     justifyContent: \"center\",\n//   },\n//   shadow: {\n//     shadowColor: \"#000\",\n//     shadowOffset: {\n//       width: 0,\n//       height: 4,\n//     },\n//     shadowOpacity: 0.3,\n//     shadowRadius: 4.65,\n//\n//     elevation: 8,\n//   },\n// });\n//\n// export default CryptoDetail;\n"],"mappings":""},"metadata":{},"sourceType":"script"}